// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?@unique
  password  String?
  role      Role?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  teams TeamMembers[]
  notifications Notification[]
  createdTasks Task[] @relation("CreatedTasks")
  assignedTasks Task[] @relation("AssignedTasks")
}

model Team{
  id        String    @id @default(cuid())
  name String
  createdBy String
  members TeamMembers[]
  tasks Task[]
  project Project[]
}

model TeamMembers{
  id        String    @id @default(cuid())
  userId String
  teamId String
  isAdmin Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
  @@unique([userId, teamId])

}

model Project{
  id        String    @id @default(cuid())
  name String
  description String
  teamId String
  createdBy String
  status Status @default(PENDING)
  team Team @relation(fields: [teamId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tasks Task[]

}

model Task{
  id        String    @id @default(cuid())
  title String
  description String
  status Status @default(PENDING)
  teamId String
  assignedTo String
  createdBy String
  userId String?
  projectId String

  creator User @relation("CreatedTasks",fields: [createdBy], references: [id])
  assignee User @relation("AssignedTasks",fields: [assignedTo], references: [id])

  project Project @relation(fields: [projectId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

}

model Notification{
  id  String  @id @default(cuid())
  userId String
  message String
  read Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  type NotificationType
  createdAt DateTime  @default(now())

}

enum NotificationType{
  TASK_ASSIGNED
  TEAM_INVITE
  TEAM_UPDATE
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Role {
  USER
  TEAM_ADMIN
}
